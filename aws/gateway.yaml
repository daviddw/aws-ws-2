AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Stack that creates an API Gateway with websockets

Parameters:

  BucketName:
    Type: String
    Description: Name of the s3 bucket

  LambdaPackage:
    Type: String
    Description: Name of the lambda package

  Stage:
    Type: String
    Description: Name of deployment stage

Resources:

  connectionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: "connectionId"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "connectionId"
        KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: True

  websocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: aws-ws-2-test-api
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  connectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref websocketApi
      RouteKey: $connect
      Target:
        !Join [ "/", [ "integrations", !Ref connectIntegration ] ]

  connectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref websocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${onConnectFunction.Arn}/invocations

  onConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: dotnetcore2.1
      Handler: aws-ws-lambda-test::ws_lambda_test.OnConnect::Handler
      CodeUri: 
        Bucket: !Ref BucketName
        Key: !Ref LambdaPackage
      Timeout: 30
      Environment:
        Variables:
          TABLE_NAME: !Ref connectionTable
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref connectionTable

  onConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - websocketApi
      - onConnectFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref onConnectFunction
      Principal: apigateway.amazonaws.com

  disconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref websocketApi
      RouteKey: $disconnect
      Target:
        !Join [ "/", [ "integrations", !Ref disconnectIntegration ] ]

  disconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref websocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${onDisconnectFunction.Arn}/invocations

  onDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: dotnetcore2.1
      Handler: aws-ws-lambda-test::ws_lambda_test.OnDisconnect::Handler
      CodeUri: 
        Bucket: !Ref BucketName
        Key: !Ref LambdaPackage
      Timeout: 30
      Environment:
        Variables:
          TABLE_NAME: !Ref connectionTable
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref connectionTable

  onDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - websocketApi
      - onDisconnectFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref onDisconnectFunction
      Principal: apigateway.amazonaws.com

  sendMessageRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref websocketApi
      RouteKey: sendMessage
      Target:
        !Join [ "/", [ "integrations", !Ref sendMessageIntegration ] ]

  sendMessageIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref websocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${sendMessageFunction.Arn}/invocations

  sendMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: dotnetcore2.1
      Handler: aws-ws-lambda-test::ws_lambda_test.SendMessage::Handler
      CodeUri: 
        Bucket: !Ref BucketName
        Key: !Ref LambdaPackage
      Timeout: 30
      Environment:
        Variables:
          TABLE_NAME: !Ref connectionTable
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref connectionTable
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - 'arn:aws:execute-api:*:*:*/@connections/*'

  sendMessagePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - websocketApi
      - sendMessageFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref sendMessageFunction
      Principal: apigateway.amazonaws.com

  deployment:
    Type: AWS::ApiGatewayV2::Deployment
    Properties:
      ApiId: !Ref websocketApi
    DependsOn:
      - connectRoute
      - disconnectRoute
      - sendMessageRoute

  stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref websocketApi
      StageName: !Ref Stage
      Description: !Join [ " ", [ !Ref Stage, "stage" ] ]
      DeploymentId: !Ref deployment

  sqsSendMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: dotnetcore2.1
      Handler: aws-ws-lambda-test::ws_lambda_test.SqsSendMessage::Handler
      CodeUri: 
        Bucket: !Ref BucketName
        Key: !Ref LambdaPackage
      Timeout: 30
      Environment:
        Variables:
          TABLE_NAME: !Ref connectionTable
          WSENDPOINT: !Join [ "", [ !Ref websocketApi, ".execute-api.", !Ref "AWS::Region", ".amazonaws.com/", !Ref stage] ]
      Events:
        sqsEvent:
          Type: SQS
          Properties:
            Queue: !ImportValue awsWsQueueName.Arn
            BatchSize: 10
  
Outputs:

  WebSocketUri:
    Description: "Stack's WebSocket URI"
    Value: !Join [ "", [ "wss://", !Ref websocketApi, ".execute-api.", !Ref "AWS::Region", ".amazonaws.com/", !Ref stage] ]
